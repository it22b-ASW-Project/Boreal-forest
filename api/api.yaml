openapi: 3.0.2
info:
  version: 1.0.0
  title: Issue Tracker API
  description: API para gestionar issues en la aplicación
servers:
  - url: http://127.0.0.1:8000/
paths:
  /api/issues/:
    get:
      tags:
        - issues
      summary: View all issues
      operationId: getAllIssues
      description: Get all the issues
      parameters:
        - name: q
          in: query
          description: Search by subject or description of the issue
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: Filter by the priority of the issue
          required: false
          schema:
            type: string
        - name: type
          in: query
          description: Filter by the type of the issue.
          required: false 
          schema:
            type: string
        - name: severity
          in: query
          description: Filter by the severity of the issue (Important, etc)
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by the status of the issue
          required: false
          schema:
            type: string
        - name: created_by
          in: query
          description: Filter by the user who created the issue.
          required: false
          schema:
            type: integer
        - name: assigned_to
          in: query
          description: Filter by the user the issue is assigned to. Use "0" for unassigned issues.
          required: false
          schema:
            type: integer
        - name: sortBy
          in: query
          description: Field to sort the results by (Status, Priority, Type, Severity, Modified)
          required: false
          schema:
            type: string
            enum: [status, priority, type, severity, modified]
        - name: sortOrder
          in: query
          description: The order to sort by. 
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issue'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error400'          
        '401':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResult'
              examples:
                errorExample:
                  $ref: '#/components/examples/error401'
      security:
        - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
  schemas:
    Issue:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "No funcionen els issues del Taiga"
        description:
          type: string
          example: "Els issues del Taiga han deixat de funcionar després de l'últim commit"
        status:
          type: string
          example: "In progress"
        created_at:
          type: string
          format: date-time
          example: "2025-04-11T01:04:05.766197+02:00"
        modified_at:
          type: string
          format: date-time
          example: "2025-04-11T01:04:05.766213+02:00"
        type:
          type: string
          example: "Question"
        severity:
          type: string
          example: "Normal"
        priority:
          type: string
          example: "Low"
        created_by:
          type: integer
          example: 1
    ErrorResult:
      type: object
      properties:
        status:
          type: integer
          enum: [400, 401, 403, 404, 409]
        error: 
          type: string
          enum: ["Bad Request", "Unauthorized", "Forbidden", "Not Found", "Conflict"]
        message: 
          type: string
  examples:
    error400:
      value:
        status: 400
        error: "Bad Request"
        message: "The request data is invalid."
    error401:
      value:
        status: 401
        error: "Unauthorized"
        message: "You provided no api key (Authorization Header)."
    error403:
      value:
        status: 403
        error: "Forbidden"
        message: "You do not have permission to access this resource."
    error404:
      value:
        status: 404
        error: "Not Found"
        message: "The requested resource could not be found."
    error409:
      value:
        status: 409
        error: "Conflict"
        message: "The request could not be completed due to a conflict with the current state."